#!/usr/bin/env node

/**
 * Module dependencies.
 */
// Import modules và app
const http = require("http");
const socketIo = require("socket.io");
const debug = require('debug')('server:server');
const app = require('../app'); // Express app

// Lấy port từ môi trường hoặc thiết lập mặc định
const port = process.env.PORT || 3000;
app.set('port', port);

// Tạo server HTTP
const server = http.createServer(app);

// Khởi tạo Socket.IO với server
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

// Socket.IO logic
io.on("connection", (socket) => {
  console.log(`Client connected: ${socket.id}`);

  socket.on("sendMessage", async ({ userId, sender, content }) => {
    try {
      const message = {
        sender,
        content,
        createdAt: new Date(),
      };

      // Lưu tin nhắn vào MongoDB
      await supportModel.updateOne(
        { user_id: userId },
        { $push: { messages: message } },
        { upsert: true }
      );

      // Phát tin nhắn đến tất cả client
      io.emit("receiveMessage", { userId, sender, content, createdAt: message.createdAt });
    } catch (err) {
      console.error("Error sending message:", err);
    }
  });

  socket.on("disconnect", () => {
    console.log(`Client disconnected: ${socket.id}`);
  });
});

// Lắng nghe server
server.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});


/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
